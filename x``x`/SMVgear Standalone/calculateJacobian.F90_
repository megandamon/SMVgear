!-----------------------------------------------------------------------------
!
! ROUTINE
!   calculateJacobian
!
! DESCRIPTION
!    This is calculating the Jacobian of the flow (jacobian) or
!    Partial derivatives for rates with three active loss terms.
!
!
! ARGUMENTS
!   numRxns1    : numRxns2 + # of rxns with one   active reactant
!   numRxns2    : numRxns3 + # of rxns with two   active reactants
!   numRxns3    :         # of rxns with three active reactants
!   nfdl1    : nfdh2 + 1
!   nfdl2    : nfdh3 + 1
!   speciesNumberA,B,C : spc # of each reactant; locates reordered active spc #s
!   numGridCellsInBlock   : # of grid-cells in a grid-block
!   rateConstants    : rate constants
!   concentrationsNew     : stores conc (y (estimated)) (molec/cm^3)
!   jacobian : jacobian of the flow
!
! NOTES:
    ! Should the Jacobian change within time step?
    ! Chemical time step is small, and predictor takes mulitple steps.
    ! rateConstants (reaction rates stay the same throughout the simulation)
    ! if chem_tdt changes or if the order changes, the Jacobian will change
!-----------------------------------------------------------------------------

      subroutine calculateJacobian (numRxns1, numRxns2, numRxns3, &
      &  nfdl1, nfdl2, &
      &  speciesNumberA, speciesNumberB, speciesNumberC, numGridCellsInBlock, &
      &  rateConstants,concentrationsNew, jacobian)

      implicit none
#     include "smv2chem_par.h"
#     include "smv2chem2.h"


!     ----------------------
!     Argument declarations.
!     ----------------------
         integer, intent(in)  :: numRxns1, numRxns2, numRxns3
         integer, intent(in)  :: nfdl1, nfdl2
         integer, intent(in)  :: speciesNumberA    (NMTRATE)
         integer, intent(in)  :: speciesNumberB    (NMTRATE)
         integer, intent(in)  :: speciesNumberC    (NMTRATE)
         integer, intent(in)  :: numGridCellsInBlock
         real*8,  intent(in) :: rateConstants (KBLOOP, NMTRATE)
         real*8,  intent(in) :: concentrationsNew  (KBLOOP, MXGSAER)
         real*8,  intent(out) :: jacobian (KBLOOP, NMTRATE, 3)



!     ----------------------
!     Variable declarations.
!     ----------------------
        integer :: nkn, k
        integer :: ja, jb, jc


!    Partial derivatives for rates with three active loss terms.
         do nkn = 1, numRxns3
            ja = speciesNumberA(nkn)
            jb = speciesNumberB(nkn)
            jc = speciesNumberC(nkn)

            do k = 1, numGridCellsInBlock
               jacobian(k,nkn,1) = rateConstants(k,nkn) * concentrationsNew(k,jb) * concentrationsNew(k,jc)
               jacobian(k,nkn,2) = rateConstants(k,nkn) * concentrationsNew(k,ja) * concentrationsNew(k,jc)
               jacobian(k,nkn,3) = rateConstants(k,nkn) * concentrationsNew(k,ja) * concentrationsNew(k,jb)
            end do

          end do


!     ---------------------------------------------------------
!     Partial derivatives for rates with two active loss terms.
!     ---------------------------------------------------------
         do nkn = nfdl2, numRxns2

            ja = speciesNumberA(nkn)
            jb = speciesNumberB(nkn)

            do k = 1, numGridCellsInBlock
               jacobian(k,nkn,1) = rateConstants(k,nkn) * concentrationsNew(k,jb)
               jacobian(k,nkn,2) = rateConstants(k,nkn) * concentrationsNew(k,ja)
            end do

         end do


!     --------------------------------------------------------
!     Partial derivatives for rates with one active loss term.
!     --------------------------------------------------------
         do nkn = nfdl1, numRxns1
            do k = 1, numGridCellsInBlock
               jacobian(k,nkn,1) = rateConstants(k,nkn)
            end do
         end do

      end subroutine calculateJacobian


